{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERNSTACK\\\\jewellery-app\\\\admin-dashboard\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await axios.post('/api/admin/login', { email, password });\n//       setCurrentUser(response.data.user);\n//       localStorage.setItem('adminToken', response.data.token);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response.data;\n//     }\n//   };\n\n//   const logout = () => {\n//     setCurrentUser(null);\n//     localStorage.removeItem('adminToken');\n//   };\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('adminToken');\n//     if (token) {\n//       // Verify token and get admin user data\n//       axios.get('/api/admin/me', {\n//         headers: { Authorization: `Bearer ${token}` }\n//       })\n//       .then(response => {\n//         setCurrentUser(response.data.user);\n//       })\n//       .catch(() => {\n//         localStorage.removeItem('adminToken');\n//       })\n//       .finally(() => {\n//         setLoading(false);\n//       });\n//     } else {\n//       setLoading(false);\n//     }\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     login,\n//     logout\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Predefined admin credentials\n//   const ADMIN_CREDENTIALS = {\n//     email: 'admin@jewellery.com',\n//     password: 'admin123'\n//   };\n\n//   const login = async (email, password) => {\n//     try {\n//       // Simulate API call delay\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n\n//       if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n//         const user = {\n//           id: 1,\n//           name: 'Admin User',\n//           email: email,\n//           role: 'admin'\n//         };\n\n//         setCurrentUser(user);\n//         localStorage.setItem('adminToken', 'mock-jwt-token');\n//         localStorage.setItem('adminUser', JSON.stringify(user));\n//         return { success: true, user };\n//       } else {\n//         throw new Error('Invalid email or password');\n//       }\n//     } catch (error) {\n//       throw error;\n//     }\n//   };\n\n//   const logout = () => {\n//     setCurrentUser(null);\n//     localStorage.removeItem('adminToken');\n//     localStorage.removeItem('adminUser');\n//   };\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('adminToken');\n//     const userData = localStorage.getItem('adminUser');\n\n//     if (token && userData) {\n//       try {\n//         setCurrentUser(JSON.parse(userData));\n//       } catch (error) {\n//         localStorage.removeItem('adminToken');\n//         localStorage.removeItem('adminUser');\n//       }\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     login,\n//     logout,\n//     isAuthenticated: !!currentUser\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('adminToken');\n//     if (token) {\n//       axios.defaults.headers.common['x-auth-token'] = token;\n//       // Verify token and get user info\n//       checkAuth();\n//     } else {\n//       setLoading(false);\n//     }\n//   }, []);\n\n//   const checkAuth = async () => {\n//     try {\n//       const response = await axios.get('/api/auth/me');\n//       if (response.data.role === 'admin') {\n//         setCurrentUser(response.data);\n//       } else {\n//         throw new Error('Not an admin user');\n//       }\n//     } catch (error) {\n//       localStorage.removeItem('adminToken');\n//       delete axios.defaults.headers.common['x-auth-token'];\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', { email, password });\n//       const { token, user } = response.data;\n\n//       if (user.role !== 'admin') {\n//         throw new Error('Access denied. Admin privileges required.');\n//       }\n\n//       localStorage.setItem('adminToken', token);\n//       axios.defaults.headers.common['x-auth-token'] = token;\n//       setCurrentUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       throw new Error(error.response?.data?.errors?.[0]?.msg || 'Login failed');\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('adminToken');\n//     delete axios.defaults.headers.common['x-auth-token'];\n//     setCurrentUser(null);\n//   };\n\n//   const value = {\n//     currentUser,\n//     login,\n//     logout,\n//     isAuthenticated: !!currentUser\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Set base URL for API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\naxios.defaults.baseURL = API_BASE_URL;\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('adminToken');\n    if (token) {\n      axios.defaults.headers.common['x-auth-token'] = token;\n      checkAuth();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const checkAuth = async () => {\n    try {\n      const response = await axios.get('/api/auth/me');\n      if (response.data.role === 'admin') {\n        setCurrentUser(response.data);\n      } else {\n        throw new Error('Not an admin user');\n      }\n    } catch (error) {\n      console.error('Admin auth check failed:', error);\n      localStorage.removeItem('adminToken');\n      delete axios.defaults.headers.common['x-auth-token'];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      if (user.role !== 'admin') {\n        throw new Error('Access denied. Admin privileges required.');\n      }\n      localStorage.setItem('adminToken', token);\n      axios.defaults.headers.common['x-auth-token'] = token;\n      setCurrentUser(user);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response$data$, _error$response$data$2;\n      console.error('Admin login error:', error);\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.errors) === null || _error$response$data$ === void 0 ? void 0 : (_error$response$data$2 = _error$response$data$[0]) === null || _error$response$data$2 === void 0 ? void 0 : _error$response$data$2.msg) || 'Login failed');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('adminToken');\n    delete axios.defaults.headers.common['x-auth-token'];\n    setCurrentUser(null);\n  };\n  const value = {\n    currentUser,\n    login,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","defaults","baseURL","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","token","localStorage","getItem","headers","common","checkAuth","response","get","data","role","Error","error","console","removeItem","login","email","password","post","user","setItem","success","_error$response","_error$response$data","_error$response$data$","_error$response$data$2","errors","msg","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERNSTACK/jewellery-app/admin-dashboard/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const response = await axios.post('/api/admin/login', { email, password });\r\n//       setCurrentUser(response.data.user);\r\n//       localStorage.setItem('adminToken', response.data.token);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response.data;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setCurrentUser(null);\r\n//     localStorage.removeItem('adminToken');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('adminToken');\r\n//     if (token) {\r\n//       // Verify token and get admin user data\r\n//       axios.get('/api/admin/me', {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       })\r\n//       .then(response => {\r\n//         setCurrentUser(response.data.user);\r\n//       })\r\n//       .catch(() => {\r\n//         localStorage.removeItem('adminToken');\r\n//       })\r\n//       .finally(() => {\r\n//         setLoading(false);\r\n//       });\r\n//     } else {\r\n//       setLoading(false);\r\n//     }\r\n//   }, []);\r\n\r\n//   const value = {\r\n//     currentUser,\r\n//     login,\r\n//     logout\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // Predefined admin credentials\r\n//   const ADMIN_CREDENTIALS = {\r\n//     email: 'admin@jewellery.com',\r\n//     password: 'admin123'\r\n//   };\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       // Simulate API call delay\r\n//       await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n//       if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\r\n//         const user = {\r\n//           id: 1,\r\n//           name: 'Admin User',\r\n//           email: email,\r\n//           role: 'admin'\r\n//         };\r\n        \r\n//         setCurrentUser(user);\r\n//         localStorage.setItem('adminToken', 'mock-jwt-token');\r\n//         localStorage.setItem('adminUser', JSON.stringify(user));\r\n//         return { success: true, user };\r\n//       } else {\r\n//         throw new Error('Invalid email or password');\r\n//       }\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setCurrentUser(null);\r\n//     localStorage.removeItem('adminToken');\r\n//     localStorage.removeItem('adminUser');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('adminToken');\r\n//     const userData = localStorage.getItem('adminUser');\r\n    \r\n//     if (token && userData) {\r\n//       try {\r\n//         setCurrentUser(JSON.parse(userData));\r\n//       } catch (error) {\r\n//         localStorage.removeItem('adminToken');\r\n//         localStorage.removeItem('adminUser');\r\n//       }\r\n//     }\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   const value = {\r\n//     currentUser,\r\n//     login,\r\n//     logout,\r\n//     isAuthenticated: !!currentUser\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('adminToken');\r\n//     if (token) {\r\n//       axios.defaults.headers.common['x-auth-token'] = token;\r\n//       // Verify token and get user info\r\n//       checkAuth();\r\n//     } else {\r\n//       setLoading(false);\r\n//     }\r\n//   }, []);\r\n\r\n//   const checkAuth = async () => {\r\n//     try {\r\n//       const response = await axios.get('/api/auth/me');\r\n//       if (response.data.role === 'admin') {\r\n//         setCurrentUser(response.data);\r\n//       } else {\r\n//         throw new Error('Not an admin user');\r\n//       }\r\n//     } catch (error) {\r\n//       localStorage.removeItem('adminToken');\r\n//       delete axios.defaults.headers.common['x-auth-token'];\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/login', { email, password });\r\n//       const { token, user } = response.data;\r\n      \r\n//       if (user.role !== 'admin') {\r\n//         throw new Error('Access denied. Admin privileges required.');\r\n//       }\r\n      \r\n//       localStorage.setItem('adminToken', token);\r\n//       axios.defaults.headers.common['x-auth-token'] = token;\r\n//       setCurrentUser(user);\r\n      \r\n//       return { success: true, user };\r\n//     } catch (error) {\r\n//       throw new Error(error.response?.data?.errors?.[0]?.msg || 'Login failed');\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('adminToken');\r\n//     delete axios.defaults.headers.common['x-auth-token'];\r\n//     setCurrentUser(null);\r\n//   };\r\n\r\n//   const value = {\r\n//     currentUser,\r\n//     login,\r\n//     logout,\r\n//     isAuthenticated: !!currentUser\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Set base URL for API calls\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\naxios.defaults.baseURL = API_BASE_URL;\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('adminToken');\r\n    if (token) {\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n      checkAuth();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const checkAuth = async () => {\r\n    try {\r\n      const response = await axios.get('/api/auth/me');\r\n      if (response.data.role === 'admin') {\r\n        setCurrentUser(response.data);\r\n      } else {\r\n        throw new Error('Not an admin user');\r\n      }\r\n    } catch (error) {\r\n      console.error('Admin auth check failed:', error);\r\n      localStorage.removeItem('adminToken');\r\n      delete axios.defaults.headers.common['x-auth-token'];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('/api/auth/login', { email, password });\r\n      const { token, user } = response.data;\r\n      \r\n      if (user.role !== 'admin') {\r\n        throw new Error('Access denied. Admin privileges required.');\r\n      }\r\n      \r\n      localStorage.setItem('adminToken', token);\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n      setCurrentUser(user);\r\n      \r\n      return { success: true, user };\r\n    } catch (error) {\r\n      console.error('Admin login error:', error);\r\n      throw new Error(error.response?.data?.errors?.[0]?.msg || 'Login failed');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('adminToken');\r\n    delete axios.defaults.headers.common['x-auth-token'];\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!currentUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":";;;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAC7EN,KAAK,CAACO,QAAQ,CAACC,OAAO,GAAGL,YAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
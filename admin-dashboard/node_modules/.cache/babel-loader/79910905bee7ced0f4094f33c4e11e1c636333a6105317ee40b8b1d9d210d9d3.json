{"ast":null,"code":"// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await axios.post('/api/admin/login', { email, password });\n//       setCurrentUser(response.data.user);\n//       localStorage.setItem('adminToken', response.data.token);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response.data;\n//     }\n//   };\n\n//   const logout = () => {\n//     setCurrentUser(null);\n//     localStorage.removeItem('adminToken');\n//   };\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('adminToken');\n//     if (token) {\n//       // Verify token and get admin user data\n//       axios.get('/api/admin/me', {\n//         headers: { Authorization: `Bearer ${token}` }\n//       })\n//       .then(response => {\n//         setCurrentUser(response.data.user);\n//       })\n//       .catch(() => {\n//         localStorage.removeItem('adminToken');\n//       })\n//       .finally(() => {\n//         setLoading(false);\n//       });\n//     } else {\n//       setLoading(false);\n//     }\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     login,\n//     logout\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Predefined admin credentials\n//   const ADMIN_CREDENTIALS = {\n//     email: 'admin@jewellery.com',\n//     password: 'admin123'\n//   };\n\n//   const login = async (email, password) => {\n//     try {\n//       // Simulate API call delay\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n\n//       if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\n//         const user = {\n//           id: 1,\n//           name: 'Admin User',\n//           email: email,\n//           role: 'admin'\n//         };\n\n//         setCurrentUser(user);\n//         localStorage.setItem('adminToken', 'mock-jwt-token');\n//         localStorage.setItem('adminUser', JSON.stringify(user));\n//         return { success: true, user };\n//       } else {\n//         throw new Error('Invalid email or password');\n//       }\n//     } catch (error) {\n//       throw error;\n//     }\n//   };\n\n//   const logout = () => {\n//     setCurrentUser(null);\n//     localStorage.removeItem('adminToken');\n//     localStorage.removeItem('adminUser');\n//   };\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('adminToken');\n//     const userData = localStorage.getItem('adminUser');\n\n//     if (token && userData) {\n//       try {\n//         setCurrentUser(JSON.parse(userData));\n//       } catch (error) {\n//         localStorage.removeItem('adminToken');\n//         localStorage.removeItem('adminUser');\n//       }\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     login,\n//     logout,\n//     isAuthenticated: !!currentUser\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/MERNSTACK/jewellery-app/admin-dashboard/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const response = await axios.post('/api/admin/login', { email, password });\r\n//       setCurrentUser(response.data.user);\r\n//       localStorage.setItem('adminToken', response.data.token);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response.data;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setCurrentUser(null);\r\n//     localStorage.removeItem('adminToken');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('adminToken');\r\n//     if (token) {\r\n//       // Verify token and get admin user data\r\n//       axios.get('/api/admin/me', {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       })\r\n//       .then(response => {\r\n//         setCurrentUser(response.data.user);\r\n//       })\r\n//       .catch(() => {\r\n//         localStorage.removeItem('adminToken');\r\n//       })\r\n//       .finally(() => {\r\n//         setLoading(false);\r\n//       });\r\n//     } else {\r\n//       setLoading(false);\r\n//     }\r\n//   }, []);\r\n\r\n//   const value = {\r\n//     currentUser,\r\n//     login,\r\n//     logout\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // Predefined admin credentials\r\n//   const ADMIN_CREDENTIALS = {\r\n//     email: 'admin@jewellery.com',\r\n//     password: 'admin123'\r\n//   };\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       // Simulate API call delay\r\n//       await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n//       if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {\r\n//         const user = {\r\n//           id: 1,\r\n//           name: 'Admin User',\r\n//           email: email,\r\n//           role: 'admin'\r\n//         };\r\n        \r\n//         setCurrentUser(user);\r\n//         localStorage.setItem('adminToken', 'mock-jwt-token');\r\n//         localStorage.setItem('adminUser', JSON.stringify(user));\r\n//         return { success: true, user };\r\n//       } else {\r\n//         throw new Error('Invalid email or password');\r\n//       }\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setCurrentUser(null);\r\n//     localStorage.removeItem('adminToken');\r\n//     localStorage.removeItem('adminUser');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('adminToken');\r\n//     const userData = localStorage.getItem('adminUser');\r\n    \r\n//     if (token && userData) {\r\n//       try {\r\n//         setCurrentUser(JSON.parse(userData));\r\n//       } catch (error) {\r\n//         localStorage.removeItem('adminToken');\r\n//         localStorage.removeItem('adminUser');\r\n//       }\r\n//     }\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   const value = {\r\n//     currentUser,\r\n//     login,\r\n//     logout,\r\n//     isAuthenticated: !!currentUser\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
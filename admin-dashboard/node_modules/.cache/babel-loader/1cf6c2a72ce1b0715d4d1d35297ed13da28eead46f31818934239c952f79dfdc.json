{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Container, Table, Button, Modal, Form, Alert } from 'react-bootstrap';\n// import axios from 'axios';\n\n// function Products() {\n//   const [products, setProducts] = useState([]);\n//   const [showModal, setShowModal] = useState(false);\n//   const [editingProduct, setEditingProduct] = useState(null);\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     price: '',\n//     description: '',\n//     image: ''\n//   });\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchProducts();\n//   }, []);\n\n//   const fetchProducts = async () => {\n//     try {\n//       const token = localStorage.getItem('adminToken');\n//       const response = await axios.get('/api/admin/products', {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       setProducts(response.data);\n//     } catch (error) {\n//       console.error('Error fetching products:', error);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const token = localStorage.getItem('adminToken');\n//       if (editingProduct) {\n//         await axios.put(`/api/admin/products/${editingProduct._id}`, formData, {\n//           headers: { Authorization: `Bearer ${token}` }\n//         });\n//         setSuccess('Product updated successfully');\n//       } else {\n//         await axios.post('/api/admin/products', formData, {\n//           headers: { Authorization: `Bearer ${token}` }\n//         });\n//         setSuccess('Product created successfully');\n//       }\n//       setShowModal(false);\n//       setEditingProduct(null);\n//       setFormData({ name: '', price: '', description: '', image: '' });\n//       fetchProducts();\n//     } catch (error) {\n//       setError(error.response?.data?.message || 'Error saving product');\n//     }\n//   };\n\n//   const handleEdit = (product) => {\n//     setEditingProduct(product);\n//     setFormData({\n//       name: product.name,\n//       price: product.price,\n//       description: product.description,\n//       image: product.image\n//     });\n//     setShowModal(true);\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (window.confirm('Are you sure you want to delete this product?')) {\n//       try {\n//         const token = localStorage.getItem('adminToken');\n//         await axios.delete(`/api/admin/products/${id}`, {\n//           headers: { Authorization: `Bearer ${token}` }\n//         });\n//         setSuccess('Product deleted successfully');\n//         fetchProducts();\n//       } catch (error) {\n//         setError(error.response?.data?.message || 'Error deleting product');\n//       }\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <div className=\"d-flex justify-content-between align-items-center mb-4\">\n//         <h2>Products Management</h2>\n//         <Button onClick={() => setShowModal(true)}>Add New Product</Button>\n//       </div>\n\n//       {error && <Alert variant=\"danger\" onClose={() => setError('')} dismissible>{error}</Alert>}\n//       {success && <Alert variant=\"success\" onClose={() => setSuccess('')} dismissible>{success}</Alert>}\n\n//       <Table striped bordered hover>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Price</th>\n//             <th>Description</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {products.map(product => (\n//             <tr key={product._id}>\n//               <td>{product.name}</td>\n//               <td>${product.price}</td>\n//               <td>{product.description}</td>\n//               <td>\n//                 <Button variant=\"warning\" size=\"sm\" className=\"me-2\" onClick={() => handleEdit(product)}>\n//                   Edit\n//                 </Button>\n//                 <Button variant=\"danger\" size=\"sm\" onClick={() => handleDelete(product._id)}>\n//                   Delete\n//                 </Button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </Table>\n\n//       <Modal show={showModal} onHide={() => setShowModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>{editingProduct ? 'Edit Product' : 'Add New Product'}</Modal.Title>\n//         </Modal.Header>\n//         <Form onSubmit={handleSubmit}>\n//           <Modal.Body>\n//             <Form.Group className=\"mb-3\">\n//               <Form.Label>Name</Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 value={formData.name}\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\n//                 required\n//               />\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\">\n//               <Form.Label>Price</Form.Label>\n//               <Form.Control\n//                 type=\"number\"\n//                 value={formData.price}\n//                 onChange={(e) => setFormData({...formData, price: e.target.value})}\n//                 required\n//               />\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\">\n//               <Form.Label>Description</Form.Label>\n//               <Form.Control\n//                 as=\"textarea\"\n//                 rows={3}\n//                 value={formData.description}\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\n//               />\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\">\n//               <Form.Label>Image URL</Form.Label>\n//               <Form.Control\n//                 type=\"text\"\n//                 value={formData.image}\n//                 onChange={(e) => setFormData({...formData, image: e.target.value})}\n//               />\n//             </Form.Group>\n//           </Modal.Body>\n//           <Modal.Footer>\n//             <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n//               Cancel\n//             </Button>\n//             <Button variant=\"primary\" type=\"submit\">\n//               {editingProduct ? 'Update' : 'Create'} Product\n//             </Button>\n//           </Modal.Footer>\n//         </Form>\n//       </Modal>\n//     </Container>\n//   );\n// }\n\n// export default Products;","map":{"version":3,"names":[],"sources":["D:/MERNSTACK/jewellery-app/admin-dashboard/src/pages/Products.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Container, Table, Button, Modal, Form, Alert } from 'react-bootstrap';\r\n// import axios from 'axios';\r\n\r\n// function Products() {\r\n//   const [products, setProducts] = useState([]);\r\n//   const [showModal, setShowModal] = useState(false);\r\n//   const [editingProduct, setEditingProduct] = useState(null);\r\n//   const [formData, setFormData] = useState({\r\n//     name: '',\r\n//     price: '',\r\n//     description: '',\r\n//     image: ''\r\n//   });\r\n//   const [error, setError] = useState('');\r\n//   const [success, setSuccess] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     fetchProducts();\r\n//   }, []);\r\n\r\n//   const fetchProducts = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem('adminToken');\r\n//       const response = await axios.get('/api/admin/products', {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       });\r\n//       setProducts(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching products:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const token = localStorage.getItem('adminToken');\r\n//       if (editingProduct) {\r\n//         await axios.put(`/api/admin/products/${editingProduct._id}`, formData, {\r\n//           headers: { Authorization: `Bearer ${token}` }\r\n//         });\r\n//         setSuccess('Product updated successfully');\r\n//       } else {\r\n//         await axios.post('/api/admin/products', formData, {\r\n//           headers: { Authorization: `Bearer ${token}` }\r\n//         });\r\n//         setSuccess('Product created successfully');\r\n//       }\r\n//       setShowModal(false);\r\n//       setEditingProduct(null);\r\n//       setFormData({ name: '', price: '', description: '', image: '' });\r\n//       fetchProducts();\r\n//     } catch (error) {\r\n//       setError(error.response?.data?.message || 'Error saving product');\r\n//     }\r\n//   };\r\n\r\n//   const handleEdit = (product) => {\r\n//     setEditingProduct(product);\r\n//     setFormData({\r\n//       name: product.name,\r\n//       price: product.price,\r\n//       description: product.description,\r\n//       image: product.image\r\n//     });\r\n//     setShowModal(true);\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (window.confirm('Are you sure you want to delete this product?')) {\r\n//       try {\r\n//         const token = localStorage.getItem('adminToken');\r\n//         await axios.delete(`/api/admin/products/${id}`, {\r\n//           headers: { Authorization: `Bearer ${token}` }\r\n//         });\r\n//         setSuccess('Product deleted successfully');\r\n//         fetchProducts();\r\n//       } catch (error) {\r\n//         setError(error.response?.data?.message || 'Error deleting product');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n//         <h2>Products Management</h2>\r\n//         <Button onClick={() => setShowModal(true)}>Add New Product</Button>\r\n//       </div>\r\n\r\n//       {error && <Alert variant=\"danger\" onClose={() => setError('')} dismissible>{error}</Alert>}\r\n//       {success && <Alert variant=\"success\" onClose={() => setSuccess('')} dismissible>{success}</Alert>}\r\n\r\n//       <Table striped bordered hover>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Name</th>\r\n//             <th>Price</th>\r\n//             <th>Description</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {products.map(product => (\r\n//             <tr key={product._id}>\r\n//               <td>{product.name}</td>\r\n//               <td>${product.price}</td>\r\n//               <td>{product.description}</td>\r\n//               <td>\r\n//                 <Button variant=\"warning\" size=\"sm\" className=\"me-2\" onClick={() => handleEdit(product)}>\r\n//                   Edit\r\n//                 </Button>\r\n//                 <Button variant=\"danger\" size=\"sm\" onClick={() => handleDelete(product._id)}>\r\n//                   Delete\r\n//                 </Button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </Table>\r\n\r\n//       <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>{editingProduct ? 'Edit Product' : 'Add New Product'}</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Form onSubmit={handleSubmit}>\r\n//           <Modal.Body>\r\n//             <Form.Group className=\"mb-3\">\r\n//               <Form.Label>Name</Form.Label>\r\n//               <Form.Control\r\n//                 type=\"text\"\r\n//                 value={formData.name}\r\n//                 onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n//                 required\r\n//               />\r\n//             </Form.Group>\r\n//             <Form.Group className=\"mb-3\">\r\n//               <Form.Label>Price</Form.Label>\r\n//               <Form.Control\r\n//                 type=\"number\"\r\n//                 value={formData.price}\r\n//                 onChange={(e) => setFormData({...formData, price: e.target.value})}\r\n//                 required\r\n//               />\r\n//             </Form.Group>\r\n//             <Form.Group className=\"mb-3\">\r\n//               <Form.Label>Description</Form.Label>\r\n//               <Form.Control\r\n//                 as=\"textarea\"\r\n//                 rows={3}\r\n//                 value={formData.description}\r\n//                 onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n//               />\r\n//             </Form.Group>\r\n//             <Form.Group className=\"mb-3\">\r\n//               <Form.Label>Image URL</Form.Label>\r\n//               <Form.Control\r\n//                 type=\"text\"\r\n//                 value={formData.image}\r\n//                 onChange={(e) => setFormData({...formData, image: e.target.value})}\r\n//               />\r\n//             </Form.Group>\r\n//           </Modal.Body>\r\n//           <Modal.Footer>\r\n//             <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\r\n//               Cancel\r\n//             </Button>\r\n//             <Button variant=\"primary\" type=\"submit\">\r\n//               {editingProduct ? 'Update' : 'Create'} Product\r\n//             </Button>\r\n//           </Modal.Footer>\r\n//         </Form>\r\n//       </Modal>\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n// export default Products;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', { email, password });\n//       setCurrentUser(response.data.user);\n//       localStorage.setItem('token', response.data.token);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response.data;\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await axios.post('/api/auth/register', userData);\n//       setCurrentUser(response.data.user);\n//       localStorage.setItem('token', response.data.token);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response.data;\n//     }\n//   };\n\n//   const logout = () => {\n//     setCurrentUser(null);\n//     localStorage.removeItem('token');\n//   };\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       // Verify token and get user data\n//       axios.get('/api/auth/me', {\n//         headers: { Authorization: `Bearer ${token}` }\n//       })\n//       .then(response => {\n//         setCurrentUser(response.data.user);\n//       })\n//       .catch(() => {\n//         localStorage.removeItem('token');\n//       })\n//       .finally(() => {\n//         setLoading(false);\n//       });\n//     } else {\n//       setLoading(false);\n//     }\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     login,\n//     register,\n//     logout\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     // Check if user is logged in\n//     const userData = localStorage.getItem('user');\n//     if (userData) {\n//       setUser(JSON.parse(userData));\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   const login = async (credentials) => {\n//     try {\n//       // Mock login - replace with actual API call\n//       if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\n//         const userData = {\n//           id: 1,\n//           name: 'Demo User',\n//           email: credentials.email\n//         };\n//         setUser(userData);\n//         localStorage.setItem('user', JSON.stringify(userData));\n//         return { success: true, user: userData };\n//       } else {\n//         return { success: false, error: 'Invalid credentials' };\n//       }\n//     } catch (error) {\n//       return { success: false, error: 'Login failed' };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       // Mock registration - replace with actual API call\n//       const newUser = {\n//         id: Date.now(),\n//         name: userData.name,\n//         email: userData.email\n//       };\n//       setUser(newUser);\n//       localStorage.setItem('user', JSON.stringify(newUser));\n//       return { success: true, user: newUser };\n//     } catch (error) {\n//       throw new Error('Registration failed');\n//     }\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem('user');\n//   };\n\n//   const value = {\n//     user,\n//     login,\n//     register,\n//     logout,\n//     isAuthenticated: !!user\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Set up axios defaults\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       axios.defaults.headers.common['x-auth-token'] = token;\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       const token = localStorage.getItem('token');\n//       if (token) {\n//         try {\n//           const response = await axios.get('/api/auth/me');\n//           setUser(response.data);\n//         } catch (error) {\n//           localStorage.removeItem('token');\n//           delete axios.defaults.headers.common['x-auth-token'];\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     checkAuth();\n//   }, []);\n\n//   const login = async (credentials) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', credentials);\n//       const { token, user } = response.data;\n\n//       localStorage.setItem('token', token);\n//       axios.defaults.headers.common['x-auth-token'] = token;\n//       setUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       return { \n//         success: false, \n//         error: error.response?.data?.errors?.[0]?.msg || 'Login failed' \n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await axios.post('/api/auth/register', userData);\n//       const { token, user } = response.data;\n\n//       localStorage.setItem('token', token);\n//       axios.defaults.headers.common['x-auth-token'] = token;\n//       setUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       throw new Error(\n//         error.response?.data?.errors?.[0]?.msg || 'Registration failed'\n//       );\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     delete axios.defaults.headers.common['x-auth-token'];\n//     setUser(null);\n//   };\n\n//   const value = {\n//     user,\n//     login,\n//     register,\n//     logout,\n//     isAuthenticated: !!user\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/MERNSTACK/jewellery-app/frontend/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/login', { email, password });\r\n//       setCurrentUser(response.data.user);\r\n//       localStorage.setItem('token', response.data.token);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response.data;\r\n//     }\r\n//   };\r\n\r\n//   const register = async (userData) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/register', userData);\r\n//       setCurrentUser(response.data.user);\r\n//       localStorage.setItem('token', response.data.token);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response.data;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setCurrentUser(null);\r\n//     localStorage.removeItem('token');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       // Verify token and get user data\r\n//       axios.get('/api/auth/me', {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       })\r\n//       .then(response => {\r\n//         setCurrentUser(response.data.user);\r\n//       })\r\n//       .catch(() => {\r\n//         localStorage.removeItem('token');\r\n//       })\r\n//       .finally(() => {\r\n//         setLoading(false);\r\n//       });\r\n//     } else {\r\n//       setLoading(false);\r\n//     }\r\n//   }, []);\r\n\r\n//   const value = {\r\n//     currentUser,\r\n//     login,\r\n//     register,\r\n//     logout\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     // Check if user is logged in\r\n//     const userData = localStorage.getItem('user');\r\n//     if (userData) {\r\n//       setUser(JSON.parse(userData));\r\n//     }\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   const login = async (credentials) => {\r\n//     try {\r\n//       // Mock login - replace with actual API call\r\n//       if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\r\n//         const userData = {\r\n//           id: 1,\r\n//           name: 'Demo User',\r\n//           email: credentials.email\r\n//         };\r\n//         setUser(userData);\r\n//         localStorage.setItem('user', JSON.stringify(userData));\r\n//         return { success: true, user: userData };\r\n//       } else {\r\n//         return { success: false, error: 'Invalid credentials' };\r\n//       }\r\n//     } catch (error) {\r\n//       return { success: false, error: 'Login failed' };\r\n//     }\r\n//   };\r\n\r\n//   const register = async (userData) => {\r\n//     try {\r\n//       // Mock registration - replace with actual API call\r\n//       const newUser = {\r\n//         id: Date.now(),\r\n//         name: userData.name,\r\n//         email: userData.email\r\n//       };\r\n//       setUser(newUser);\r\n//       localStorage.setItem('user', JSON.stringify(newUser));\r\n//       return { success: true, user: newUser };\r\n//     } catch (error) {\r\n//       throw new Error('Registration failed');\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem('user');\r\n//   };\r\n\r\n//   const value = {\r\n//     user,\r\n//     login,\r\n//     register,\r\n//     logout,\r\n//     isAuthenticated: !!user\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // Set up axios defaults\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       axios.defaults.headers.common['x-auth-token'] = token;\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       const token = localStorage.getItem('token');\r\n//       if (token) {\r\n//         try {\r\n//           const response = await axios.get('/api/auth/me');\r\n//           setUser(response.data);\r\n//         } catch (error) {\r\n//           localStorage.removeItem('token');\r\n//           delete axios.defaults.headers.common['x-auth-token'];\r\n//         }\r\n//       }\r\n//       setLoading(false);\r\n//     };\r\n\r\n//     checkAuth();\r\n//   }, []);\r\n\r\n//   const login = async (credentials) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/login', credentials);\r\n//       const { token, user } = response.data;\r\n      \r\n//       localStorage.setItem('token', token);\r\n//       axios.defaults.headers.common['x-auth-token'] = token;\r\n//       setUser(user);\r\n      \r\n//       return { success: true, user };\r\n//     } catch (error) {\r\n//       return { \r\n//         success: false, \r\n//         error: error.response?.data?.errors?.[0]?.msg || 'Login failed' \r\n//       };\r\n//     }\r\n//   };\r\n\r\n//   const register = async (userData) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/register', userData);\r\n//       const { token, user } = response.data;\r\n      \r\n//       localStorage.setItem('token', token);\r\n//       axios.defaults.headers.common['x-auth-token'] = token;\r\n//       setUser(user);\r\n      \r\n//       return { success: true, user };\r\n//     } catch (error) {\r\n//       throw new Error(\r\n//         error.response?.data?.errors?.[0]?.msg || 'Registration failed'\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     delete axios.defaults.headers.common['x-auth-token'];\r\n//     setUser(null);\r\n//   };\r\n\r\n//   const value = {\r\n//     user,\r\n//     login,\r\n//     register,\r\n//     logout,\r\n//     isAuthenticated: !!user\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
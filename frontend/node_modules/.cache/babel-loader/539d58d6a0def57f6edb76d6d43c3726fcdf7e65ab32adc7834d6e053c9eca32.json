{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERNSTACK\\\\jewellery-app\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', { email, password });\n//       setCurrentUser(response.data.user);\n//       localStorage.setItem('token', response.data.token);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response.data;\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await axios.post('/api/auth/register', userData);\n//       setCurrentUser(response.data.user);\n//       localStorage.setItem('token', response.data.token);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response.data;\n//     }\n//   };\n\n//   const logout = () => {\n//     setCurrentUser(null);\n//     localStorage.removeItem('token');\n//   };\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       // Verify token and get user data\n//       axios.get('/api/auth/me', {\n//         headers: { Authorization: `Bearer ${token}` }\n//       })\n//       .then(response => {\n//         setCurrentUser(response.data.user);\n//       })\n//       .catch(() => {\n//         localStorage.removeItem('token');\n//       })\n//       .finally(() => {\n//         setLoading(false);\n//       });\n//     } else {\n//       setLoading(false);\n//     }\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     login,\n//     register,\n//     logout\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      setUser(JSON.parse(userData));\n    }\n    setLoading(false);\n  }, []);\n  const login = async credentials => {\n    try {\n      // Mock login - replace with actual API call\n      if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\n        const userData = {\n          id: 1,\n          name: 'Demo User',\n          email: credentials.email\n        };\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid credentials'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      // Mock registration - replace with actual API call\n      const newUser = {\n        id: Date.now(),\n        name: userData.name,\n        email: userData.email\n      };\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (error) {\n      throw new Error('Registration failed');\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","userData","localStorage","getItem","JSON","parse","login","credentials","email","password","id","name","setItem","stringify","success","error","register","newUser","Date","now","Error","logout","removeItem","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERNSTACK/jewellery-app/frontend/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/login', { email, password });\r\n//       setCurrentUser(response.data.user);\r\n//       localStorage.setItem('token', response.data.token);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response.data;\r\n//     }\r\n//   };\r\n\r\n//   const register = async (userData) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/register', userData);\r\n//       setCurrentUser(response.data.user);\r\n//       localStorage.setItem('token', response.data.token);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response.data;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setCurrentUser(null);\r\n//     localStorage.removeItem('token');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       // Verify token and get user data\r\n//       axios.get('/api/auth/me', {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       })\r\n//       .then(response => {\r\n//         setCurrentUser(response.data.user);\r\n//       })\r\n//       .catch(() => {\r\n//         localStorage.removeItem('token');\r\n//       })\r\n//       .finally(() => {\r\n//         setLoading(false);\r\n//       });\r\n//     } else {\r\n//       setLoading(false);\r\n//     }\r\n//   }, []);\r\n\r\n//   const value = {\r\n//     currentUser,\r\n//     login,\r\n//     register,\r\n//     logout\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in\r\n    const userData = localStorage.getItem('user');\r\n    if (userData) {\r\n      setUser(JSON.parse(userData));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      // Mock login - replace with actual API call\r\n      if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\r\n        const userData = {\r\n          id: 1,\r\n          name: 'Demo User',\r\n          email: credentials.email\r\n        };\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return { success: true, user: userData };\r\n      } else {\r\n        return { success: false, error: 'Invalid credentials' };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: 'Login failed' };\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      // Mock registration - replace with actual API call\r\n      const newUser = {\r\n        id: Date.now(),\r\n        name: userData.name,\r\n        email: userData.email\r\n      };\r\n      setUser(newUser);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n      return { success: true, user: newUser };\r\n    } catch (error) {\r\n      throw new Error('Registration failed');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERNSTACK\\\\jewellery-app\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', { email, password });\n//       setCurrentUser(response.data.user);\n//       localStorage.setItem('token', response.data.token);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response.data;\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await axios.post('/api/auth/register', userData);\n//       setCurrentUser(response.data.user);\n//       localStorage.setItem('token', response.data.token);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response.data;\n//     }\n//   };\n\n//   const logout = () => {\n//     setCurrentUser(null);\n//     localStorage.removeItem('token');\n//   };\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       // Verify token and get user data\n//       axios.get('/api/auth/me', {\n//         headers: { Authorization: `Bearer ${token}` }\n//       })\n//       .then(response => {\n//         setCurrentUser(response.data.user);\n//       })\n//       .catch(() => {\n//         localStorage.removeItem('token');\n//       })\n//       .finally(() => {\n//         setLoading(false);\n//       });\n//     } else {\n//       setLoading(false);\n//     }\n//   }, []);\n\n//   const value = {\n//     currentUser,\n//     login,\n//     register,\n//     logout\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     // Check if user is logged in\n//     const userData = localStorage.getItem('user');\n//     if (userData) {\n//       setUser(JSON.parse(userData));\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   const login = async (credentials) => {\n//     try {\n//       // Mock login - replace with actual API call\n//       if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\n//         const userData = {\n//           id: 1,\n//           name: 'Demo User',\n//           email: credentials.email\n//         };\n//         setUser(userData);\n//         localStorage.setItem('user', JSON.stringify(userData));\n//         return { success: true, user: userData };\n//       } else {\n//         return { success: false, error: 'Invalid credentials' };\n//       }\n//     } catch (error) {\n//       return { success: false, error: 'Login failed' };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       // Mock registration - replace with actual API call\n//       const newUser = {\n//         id: Date.now(),\n//         name: userData.name,\n//         email: userData.email\n//       };\n//       setUser(newUser);\n//       localStorage.setItem('user', JSON.stringify(newUser));\n//       return { success: true, user: newUser };\n//     } catch (error) {\n//       throw new Error('Registration failed');\n//     }\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem('user');\n//   };\n\n//   const value = {\n//     user,\n//     login,\n//     register,\n//     logout,\n//     isAuthenticated: !!user\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Set up axios defaults\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       axios.defaults.headers.common['x-auth-token'] = token;\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       const token = localStorage.getItem('token');\n//       if (token) {\n//         try {\n//           const response = await axios.get('/api/auth/me');\n//           setUser(response.data);\n//         } catch (error) {\n//           localStorage.removeItem('token');\n//           delete axios.defaults.headers.common['x-auth-token'];\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     checkAuth();\n//   }, []);\n\n//   const login = async (credentials) => {\n//     try {\n//       const response = await axios.post('/api/auth/login', credentials);\n//       const { token, user } = response.data;\n\n//       localStorage.setItem('token', token);\n//       axios.defaults.headers.common['x-auth-token'] = token;\n//       setUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       return { \n//         success: false, \n//         error: error.response?.data?.errors?.[0]?.msg || 'Login failed' \n//       };\n//     }\n//   };\n\n//   const register = async (userData) => {\n//     try {\n//       const response = await axios.post('/api/auth/register', userData);\n//       const { token, user } = response.data;\n\n//       localStorage.setItem('token', token);\n//       axios.defaults.headers.common['x-auth-token'] = token;\n//       setUser(user);\n\n//       return { success: true, user };\n//     } catch (error) {\n//       throw new Error(\n//         error.response?.data?.errors?.[0]?.msg || 'Registration failed'\n//       );\n//     }\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     delete axios.defaults.headers.common['x-auth-token'];\n//     setUser(null);\n//   };\n\n//   const value = {\n//     user,\n//     login,\n//     register,\n//     logout,\n//     isAuthenticated: !!user\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {!loading && children}\n//     </AuthContext.Provider>\n//   );\n// }\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Set base URL for API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\naxios.defaults.baseURL = API_BASE_URL;\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      axios.defaults.headers.common['x-auth-token'] = token;\n      checkAuth();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const checkAuth = async () => {\n    try {\n      const response = await axios.get('/api/auth/me');\n      setUser(response.data);\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['x-auth-token'];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      const response = await axios.post('/api/auth/login', credentials);\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem('token', token);\n      axios.defaults.headers.common['x-auth-token'] = token;\n      setUser(user);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response$data$, _error$response$data$2;\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.errors) === null || _error$response$data$ === void 0 ? void 0 : (_error$response$data$2 = _error$response$data$[0]) === null || _error$response$data$2 === void 0 ? void 0 : _error$response$data$2.msg) || 'Login failed'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await axios.post('/api/auth/register', userData);\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem('token', token);\n      axios.defaults.headers.common['x-auth-token'] = token;\n      setUser(user);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data, _error$response2$data2, _error$response2$data3;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.errors) === null || _error$response2$data2 === void 0 ? void 0 : (_error$response2$data3 = _error$response2$data2[0]) === null || _error$response2$data3 === void 0 ? void 0 : _error$response2$data3.msg) || 'Registration failed');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['x-auth-token'];\n    setUser(null);\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","defaults","baseURL","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","headers","common","checkAuth","response","get","data","error","console","removeItem","login","credentials","post","setItem","success","_error$response","_error$response$data","_error$response$data$","_error$response$data$2","errors","msg","register","userData","_error$response2","_error$response2$data","_error$response2$data2","_error$response2$data3","Error","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERNSTACK/jewellery-app/frontend/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/login', { email, password });\r\n//       setCurrentUser(response.data.user);\r\n//       localStorage.setItem('token', response.data.token);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response.data;\r\n//     }\r\n//   };\r\n\r\n//   const register = async (userData) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/register', userData);\r\n//       setCurrentUser(response.data.user);\r\n//       localStorage.setItem('token', response.data.token);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response.data;\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setCurrentUser(null);\r\n//     localStorage.removeItem('token');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       // Verify token and get user data\r\n//       axios.get('/api/auth/me', {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       })\r\n//       .then(response => {\r\n//         setCurrentUser(response.data.user);\r\n//       })\r\n//       .catch(() => {\r\n//         localStorage.removeItem('token');\r\n//       })\r\n//       .finally(() => {\r\n//         setLoading(false);\r\n//       });\r\n//     } else {\r\n//       setLoading(false);\r\n//     }\r\n//   }, []);\r\n\r\n//   const value = {\r\n//     currentUser,\r\n//     login,\r\n//     register,\r\n//     logout\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     // Check if user is logged in\r\n//     const userData = localStorage.getItem('user');\r\n//     if (userData) {\r\n//       setUser(JSON.parse(userData));\r\n//     }\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   const login = async (credentials) => {\r\n//     try {\r\n//       // Mock login - replace with actual API call\r\n//       if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\r\n//         const userData = {\r\n//           id: 1,\r\n//           name: 'Demo User',\r\n//           email: credentials.email\r\n//         };\r\n//         setUser(userData);\r\n//         localStorage.setItem('user', JSON.stringify(userData));\r\n//         return { success: true, user: userData };\r\n//       } else {\r\n//         return { success: false, error: 'Invalid credentials' };\r\n//       }\r\n//     } catch (error) {\r\n//       return { success: false, error: 'Login failed' };\r\n//     }\r\n//   };\r\n\r\n//   const register = async (userData) => {\r\n//     try {\r\n//       // Mock registration - replace with actual API call\r\n//       const newUser = {\r\n//         id: Date.now(),\r\n//         name: userData.name,\r\n//         email: userData.email\r\n//       };\r\n//       setUser(newUser);\r\n//       localStorage.setItem('user', JSON.stringify(newUser));\r\n//       return { success: true, user: newUser };\r\n//     } catch (error) {\r\n//       throw new Error('Registration failed');\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem('user');\r\n//   };\r\n\r\n//   const value = {\r\n//     user,\r\n//     login,\r\n//     register,\r\n//     logout,\r\n//     isAuthenticated: !!user\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // Set up axios defaults\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       axios.defaults.headers.common['x-auth-token'] = token;\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       const token = localStorage.getItem('token');\r\n//       if (token) {\r\n//         try {\r\n//           const response = await axios.get('/api/auth/me');\r\n//           setUser(response.data);\r\n//         } catch (error) {\r\n//           localStorage.removeItem('token');\r\n//           delete axios.defaults.headers.common['x-auth-token'];\r\n//         }\r\n//       }\r\n//       setLoading(false);\r\n//     };\r\n\r\n//     checkAuth();\r\n//   }, []);\r\n\r\n//   const login = async (credentials) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/login', credentials);\r\n//       const { token, user } = response.data;\r\n      \r\n//       localStorage.setItem('token', token);\r\n//       axios.defaults.headers.common['x-auth-token'] = token;\r\n//       setUser(user);\r\n      \r\n//       return { success: true, user };\r\n//     } catch (error) {\r\n//       return { \r\n//         success: false, \r\n//         error: error.response?.data?.errors?.[0]?.msg || 'Login failed' \r\n//       };\r\n//     }\r\n//   };\r\n\r\n//   const register = async (userData) => {\r\n//     try {\r\n//       const response = await axios.post('/api/auth/register', userData);\r\n//       const { token, user } = response.data;\r\n      \r\n//       localStorage.setItem('token', token);\r\n//       axios.defaults.headers.common['x-auth-token'] = token;\r\n//       setUser(user);\r\n      \r\n//       return { success: true, user };\r\n//     } catch (error) {\r\n//       throw new Error(\r\n//         error.response?.data?.errors?.[0]?.msg || 'Registration failed'\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     delete axios.defaults.headers.common['x-auth-token'];\r\n//     setUser(null);\r\n//   };\r\n\r\n//   const value = {\r\n//     user,\r\n//     login,\r\n//     register,\r\n//     logout,\r\n//     isAuthenticated: !!user\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {!loading && children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n\r\n\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Set base URL for API calls\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\naxios.defaults.baseURL = API_BASE_URL;\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n      checkAuth();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const checkAuth = async () => {\r\n    try {\r\n      const response = await axios.get('/api/auth/me');\r\n      setUser(response.data);\r\n    } catch (error) {\r\n      console.error('Auth check failed:', error);\r\n      localStorage.removeItem('token');\r\n      delete axios.defaults.headers.common['x-auth-token'];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const response = await axios.post('/api/auth/login', credentials);\r\n      const { token, user } = response.data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n      setUser(user);\r\n      \r\n      return { success: true, user };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.errors?.[0]?.msg || 'Login failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await axios.post('/api/auth/register', userData);\r\n      const { token, user } = response.data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      axios.defaults.headers.common['x-auth-token'] = token;\r\n      setUser(user);\r\n      \r\n      return { success: true, user };\r\n    } catch (error) {\r\n      throw new Error(\r\n        error.response?.data?.errors?.[0]?.msg || 'Registration failed'\r\n      );\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['x-auth-token'];\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":";;;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}